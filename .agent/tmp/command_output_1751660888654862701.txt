The "poetry.dev-dependencies" section is deprecated and will be removed in a future version. Use "poetry.group.dev.dependencies" instead.
============================= test session starts ==============================
platform linux -- Python 3.12.1, pytest-8.4.1, pluggy-1.6.0 -- /home/thomas/Projects/label-maker/.venv/bin/python
cachedir: .pytest_cache
rootdir: /home/thomas/Projects/llm/plugins/Utilities/llm-jina
configfile: pyproject.toml
plugins: httpx-0.35.0, asyncio-0.25.3, recording-0.13.2, inline-snapshot-0.22.0, env-1.1.5, anyio-4.9.0, requests-mock-1.12.1, mock-3.14.1
asyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None
collecting ... collected 29 items

tests/unit/test_classifier.py::test_classify_text_auto_model PASSED      [  3%]
tests/unit/test_classifier.py::test_classify_image_auto_model PASSED     [  6%]
tests/unit/test_classifier.py::test_classify_manual_model PASSED         [ 10%]
tests/unit/test_classifier.py::test_classify_invalid_input PASSED        [ 13%]
tests/unit/test_client.py::test_client_init_with_env_var PASSED          [ 17%]
tests/unit/test_client.py::test_client_init_with_direct_key PASSED       [ 20%]
tests/unit/test_client.py::test_client_init_no_key_raises_error PASSED   [ 24%]
tests/unit/test_client.py::test_client_post_request FAILED               [ 27%]
tests/unit/test_client.py::test_client_post_request_with_extra_headers FAILED [ 31%]
tests/unit/test_commands.py::test_cli_read_command PASSED                [ 34%]
tests/unit/test_commands.py::test_cli_search_command PASSED              [ 37%]
tests/unit/test_commands.py::test_cli_rerank_command FAILED              [ 41%]
tests/unit/test_commands.py::test_cli_segment_command PASSED             [ 44%]
tests/unit/test_commands.py::test_cli_deepsearch_command PASSED          [ 48%]
tests/unit/test_deepsearch.py::test_deepsearch_basic PASSED              [ 51%]
tests/unit/test_deepsearch.py::test_deepsearch_with_history PASSED       [ 55%]
tests/unit/test_embeddings.py::test_jina_embeddings_init PASSED          [ 58%]
tests/unit/test_embeddings.py::test_jina_embeddings_client_property PASSED [ 62%]
tests/unit/test_embeddings.py::test_embed_batch_success PASSED           [ 65%]
tests/unit/test_embeddings.py::test_embed_batch_invalid_response PASSED  [ 68%]
tests/unit/test_reader.py::test_read_basic PASSED                        [ 72%]
tests/unit/test_reader.py::test_read_with_all_headers PASSED             [ 75%]
tests/unit/test_rerank.py::test_rerank_basic PASSED                      [ 79%]
tests/unit/test_rerank.py::test_rerank_with_options PASSED               [ 82%]
tests/unit/test_search.py::test_search_basic PASSED                      [ 86%]
tests/unit/test_search.py::test_search_with_all_options PASSED           [ 89%]
tests/unit/test_segmenter.py::test_segment_basic PASSED                  [ 93%]
tests/unit/test_segmenter.py::test_segment_with_options PASSED           [ 96%]
tests/unit/test_segmenter.py::test_segment_with_tail PASSED              [100%]

=================================== FAILURES ===================================
___________________________ test_client_post_request ___________________________

self = <MagicMock name='post' id='140565657973536'>
args = ('https://test.jina.ai/v1/test',)
kwargs = {'headers': {'Accept': 'application/json', 'Authorization': 'Bearer test_api_key_123', 'Content-Type': 'application/json'}, 'json': {'input': 'test'}}
expected = call('https://test.jina.ai/v1/test', json={'input': 'test'}, headers={'Authorization': 'Bearer test_api_key_123', 'Content-Type': 'application/json', 'Accept': 'application/json'})
actual = call('https://test.jina.ai/v1/test', json={'input': 'test'}, headers={'User-Agent': 'python-requests/2.32.4', 'Accept-...ion/json', 'Connection': 'keep-alive', 'Authorization': 'Bearer test_api_key_123', 'Content-Type': 'application/json'})
_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x7fd7ca30bc40>
cause = None

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\n  Actual: %s'
                    % (expected, actual))
            raise AssertionError(error_message)
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher(_Call((args, kwargs), two=True))
        actual = self._call_matcher(self.call_args)
        if actual != expected:
            cause = expected if isinstance(expected, Exception) else None
>           raise AssertionError(_error_message()) from cause
E           AssertionError: expected call not found.
E           Expected: post('https://test.jina.ai/v1/test', json={'input': 'test'}, headers={'Authorization': 'Bearer test_api_key_123', 'Content-Type': 'application/json', 'Accept': 'application/json'})
E             Actual: post('https://test.jina.ai/v1/test', json={'input': 'test'}, headers={'User-Agent': 'python-requests/2.32.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Authorization': 'Bearer test_api_key_123', 'Content-Type': 'application/json'})

/home/thomas/miniconda3/lib/python3.12/unittest/mock.py:944: AssertionError

During handling of the above exception, another exception occurred:

self = <MagicMock name='post' id='140565657973536'>
args = ('https://test.jina.ai/v1/test',)
kwargs = {'headers': {'Accept': 'application/json', 'Authorization': 'Bearer test_api_key_123', 'Content-Type': 'application/json'}, 'json': {'input': 'test'}}

    def assert_called_once_with(self, /, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
            raise AssertionError(msg)
>       return self.assert_called_with(*args, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AssertionError: expected call not found.
E       Expected: post('https://test.jina.ai/v1/test', json={'input': 'test'}, headers={'Authorization': 'Bearer test_api_key_123', 'Content-Type': 'application/json', 'Accept': 'application/json'})
E         Actual: post('https://test.jina.ai/v1/test', json={'input': 'test'}, headers={'User-Agent': 'python-requests/2.32.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Authorization': 'Bearer test_api_key_123', 'Content-Type': 'application/json'})
E       
E       pytest introspection follows:
E       
E       Kwargs:
E       assert {'headers': {...put': 'test'}} == {'headers': {...put': 'test'}}
E         
E         Omitting 1 identical items, use -vv to show
E         Differing items:
E         {'headers': {'User-Agent': 'python-requests/2.32.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Authorization': 'Bearer test_api_key_123', 'Content-Type': 'application/json'}} != {'headers': {'Accept': 'application/json', 'Authorization': 'Bearer test_api_key_123', 'Content-Type': 'application/json'}}
E         
E         Full diff:
E           {...
E         
E         ...Full output truncated (10 lines hidden), use '-vv' to show

/home/thomas/miniconda3/lib/python3.12/unittest/mock.py:956: AssertionError

During handling of the above exception, another exception occurred:

mock_env_api_key = 'test_api_key_123'
mock_response = <MagicMock id='140564787381648'>

    def test_client_post_request(mock_env_api_key, mock_response):
        """Test the POST request method of the client."""
        client = JinaClient()
    
        with patch("requests.Session.post", return_value=mock_response) as mock_post:
            test_url = "https://test.jina.ai/v1/test"
            test_data = {"input": "test"}
            response_data = client.post(test_url, test_data)
    
            expected_headers = {
                "Authorization": f"Bearer {mock_env_api_key}",
                "Content-Type": "application/json",
                "Accept": "application/json",
            }
    
>           mock_post.assert_called_once_with(
                test_url,
                json=test_data,
                headers=expected_headers
            )
E           AssertionError: expected call not found.
E           Expected: post('https://test.jina.ai/v1/test', json={'input': 'test'}, headers={'Authorization': 'Bearer test_api_key_123', 'Content-Type': 'application/json', 'Accept': 'application/json'})
E             Actual: post('https://test.jina.ai/v1/test', json={'input': 'test'}, headers={'User-Agent': 'python-requests/2.32.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Authorization': 'Bearer test_api_key_123', 'Content-Type': 'application/json'})
E           
E           pytest introspection follows:
E           
E           Kwargs:
E           assert {'headers': {...put': 'test'}} == {'headers': {...put': 'test'}}
E             
E             Omitting 1 identical items, use -vv to show
E             Differing items:
E             {'headers': {'User-Agent': 'python-requests/2.32.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Authorization': 'Bearer test_api_key_123', 'Content-Type': 'application/json'}} != {'headers': {'Accept': 'application/json', 'Authorization': 'Bearer test_api_key_123', 'Content-Type': 'application/json'}}
E             
E             Full diff:
E               {...
E             
E             ...Full output truncated (10 lines hidden), use '-vv' to show

tests/unit/test_client.py:44: AssertionError
_________________ test_client_post_request_with_extra_headers __________________

self = <MagicMock name='post' id='140564742919888'>
args = ('https://test.jina.ai/v1/test',)
kwargs = {'headers': {'Accept': 'application/json', 'Authorization': 'Bearer test_api_key_123', 'Content-Type': 'application/json', 'X-Test-Header': 'true'}, 'json': {'input': 'test'}}
expected = call('https://test.jina.ai/v1/test', json={'input': 'test'}, headers={'Authorization': 'Bearer test_api_key_123', 'Content-Type': 'application/json', 'Accept': 'application/json', 'X-Test-Header': 'true'})
actual = call('https://test.jina.ai/v1/test', json={'input': 'test'}, headers={'User-Agent': 'python-requests/2.32.4', 'Accept-...'keep-alive', 'Authorization': 'Bearer test_api_key_123', 'Content-Type': 'application/json', 'X-Test-Header': 'true'})
_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x7fd7ca3b0d60>
cause = None

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\n  Actual: %s'
                    % (expected, actual))
            raise AssertionError(error_message)
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher(_Call((args, kwargs), two=True))
        actual = self._call_matcher(self.call_args)
        if actual != expected:
            cause = expected if isinstance(expected, Exception) else None
>           raise AssertionError(_error_message()) from cause
E           AssertionError: expected call not found.
E           Expected: post('https://test.jina.ai/v1/test', json={'input': 'test'}, headers={'Authorization': 'Bearer test_api_key_123', 'Content-Type': 'application/json', 'Accept': 'application/json', 'X-Test-Header': 'true'})
E             Actual: post('https://test.jina.ai/v1/test', json={'input': 'test'}, headers={'User-Agent': 'python-requests/2.32.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Authorization': 'Bearer test_api_key_123', 'Content-Type': 'application/json', 'X-Test-Header': 'true'})

/home/thomas/miniconda3/lib/python3.12/unittest/mock.py:944: AssertionError

During handling of the above exception, another exception occurred:

self = <MagicMock name='post' id='140564742919888'>
args = ('https://test.jina.ai/v1/test',)
kwargs = {'headers': {'Accept': 'application/json', 'Authorization': 'Bearer test_api_key_123', 'Content-Type': 'application/json', 'X-Test-Header': 'true'}, 'json': {'input': 'test'}}

    def assert_called_once_with(self, /, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
            raise AssertionError(msg)
>       return self.assert_called_with(*args, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AssertionError: expected call not found.
E       Expected: post('https://test.jina.ai/v1/test', json={'input': 'test'}, headers={'Authorization': 'Bearer test_api_key_123', 'Content-Type': 'application/json', 'Accept': 'application/json', 'X-Test-Header': 'true'})
E         Actual: post('https://test.jina.ai/v1/test', json={'input': 'test'}, headers={'User-Agent': 'python-requests/2.32.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Authorization': 'Bearer test_api_key_123', 'Content-Type': 'application/json', 'X-Test-Header': 'true'})
E       
E       pytest introspection follows:
E       
E       Kwargs:
E       assert {'headers': {...put': 'test'}} == {'headers': {...put': 'test'}}
E         
E         Omitting 1 identical items, use -vv to show
E         Differing items:
E         {'headers': {'User-Agent': 'python-requests/2.32.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json',...'keep-alive', 'Authorization': 'Bearer test_api_key_123', 'Content-Type': 'application/json', 'X-Test-Header': 'true'}} != {'headers': {'Accept': 'application/json', 'Authorization': 'Bearer test_api_key_123', 'Content-Type': 'application/json', 'X-Test-Header': 'true'}}
E         
E         Full diff:
E           {...
E         
E         ...Full output truncated (11 lines hidden), use '-vv' to show

/home/thomas/miniconda3/lib/python3.12/unittest/mock.py:956: AssertionError

During handling of the above exception, another exception occurred:

mock_env_api_key = 'test_api_key_123'
mock_response = <MagicMock id='140564787393648'>

    def test_client_post_request_with_extra_headers(mock_env_api_key, mock_response):
        """Test the POST request method with extra headers."""
        client = JinaClient()
    
        with patch("requests.Session.post", return_value=mock_response) as mock_post:
            test_url = "https://test.jina.ai/v1/test"
            test_data = {"input": "test"}
            extra_headers = {"X-Test-Header": "true"}
            response_data = client.post(test_url, test_data, headers=extra_headers)
    
            expected_headers = {
                "Authorization": f"Bearer {mock_env_api_key}",
                "Content-Type": "application/json",
                "Accept": "application/json",
                "X-Test-Header": "true",
            }
    
>           mock_post.assert_called_once_with(
                test_url,
                json=test_data,
                headers=expected_headers
            )
E           AssertionError: expected call not found.
E           Expected: post('https://test.jina.ai/v1/test', json={'input': 'test'}, headers={'Authorization': 'Bearer test_api_key_123', 'Content-Type': 'application/json', 'Accept': 'application/json', 'X-Test-Header': 'true'})
E             Actual: post('https://test.jina.ai/v1/test', json={'input': 'test'}, headers={'User-Agent': 'python-requests/2.32.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json', 'Connection': 'keep-alive', 'Authorization': 'Bearer test_api_key_123', 'Content-Type': 'application/json', 'X-Test-Header': 'true'})
E           
E           pytest introspection follows:
E           
E           Kwargs:
E           assert {'headers': {...put': 'test'}} == {'headers': {...put': 'test'}}
E             
E             Omitting 1 identical items, use -vv to show
E             Differing items:
E             {'headers': {'User-Agent': 'python-requests/2.32.4', 'Accept-Encoding': 'gzip, deflate', 'Accept': 'application/json',...'keep-alive', 'Authorization': 'Bearer test_api_key_123', 'Content-Type': 'application/json', 'X-Test-Header': 'true'}} != {'headers': {'Accept': 'application/json', 'Authorization': 'Bearer test_api_key_123', 'Content-Type': 'application/json', 'X-Test-Header': 'true'}}
E             
E             Full diff:
E               {...
E             
E             ...Full output truncated (11 lines hidden), use '-vv' to show

tests/unit/test_client.py:69: AssertionError
___________________________ test_cli_rerank_command ____________________________

self = <MagicMock name='rerank' id='140564743725152'>, args = ()
kwargs = {'documents': ('doc1', 'doc2'), 'model': 'jina-reranker-v2-base-multilingual', 'query': 'query', 'top_n': 1}
expected = call(query='query', documents=('doc1', 'doc2'), model='jina-reranker-v2-base-multilingual', top_n=1)
actual = call(query='query', documents=['doc1', 'doc2'], model='jina-reranker-v2-base-multilingual', top_n=1)
_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x7fd7ca3663e0>
cause = None

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\n  Actual: %s'
                    % (expected, actual))
            raise AssertionError(error_message)
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher(_Call((args, kwargs), two=True))
        actual = self._call_matcher(self.call_args)
        if actual != expected:
            cause = expected if isinstance(expected, Exception) else None
>           raise AssertionError(_error_message()) from cause
E           AssertionError: expected call not found.
E           Expected: rerank(query='query', documents=('doc1', 'doc2'), model='jina-reranker-v2-base-multilingual', top_n=1)
E             Actual: rerank(query='query', documents=['doc1', 'doc2'], model='jina-reranker-v2-base-multilingual', top_n=1)

/home/thomas/miniconda3/lib/python3.12/unittest/mock.py:944: AssertionError

During handling of the above exception, another exception occurred:

self = <MagicMock name='rerank' id='140564743725152'>, args = ()
kwargs = {'documents': ('doc1', 'doc2'), 'model': 'jina-reranker-v2-base-multilingual', 'query': 'query', 'top_n': 1}

    def assert_called_once_with(self, /, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
            raise AssertionError(msg)
>       return self.assert_called_with(*args, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AssertionError: expected call not found.
E       Expected: rerank(query='query', documents=('doc1', 'doc2'), model='jina-reranker-v2-base-multilingual', top_n=1)
E         Actual: rerank(query='query', documents=['doc1', 'doc2'], model='jina-reranker-v2-base-multilingual', top_n=1)
E       
E       pytest introspection follows:
E       
E       Kwargs:
E       assert {'documents':...', 'top_n': 1} == {'documents':...', 'top_n': 1}
E         
E         Omitting 3 identical items, use -vv to show
E         Differing items:
E         {'documents': ['doc1', 'doc2']} != {'documents': ('doc1', 'doc2')}
E         
E         Full diff:
E           {...
E         
E         ...Full output truncated (14 lines hidden), use '-vv' to show

/home/thomas/miniconda3/lib/python3.12/unittest/mock.py:956: AssertionError

During handling of the above exception, another exception occurred:

mock_rerank = <MagicMock name='rerank' id='140564743725152'>
runner = <click.testing.CliRunner object at 0x7fd7c79e1b20>

    @patch('llm_jina.commands.rerank.rerank')
    def test_cli_rerank_command(mock_rerank, runner):
        """Test the 'rerank' CLI command."""
        mock_rerank.return_value = {"results": "mocked rerank"}
        result = runner.invoke(cli, ['rerank-docs', 'query', 'doc1', 'doc2', '--top-n', '1'])
    
        assert result.exit_code == 0
        assert 'mocked rerank' in result.output
>       mock_rerank.assert_called_once_with(
            query='query',
            documents=('doc1', 'doc2'),
            model='jina-reranker-v2-base-multilingual',
            top_n=1
        )
E       AssertionError: expected call not found.
E       Expected: rerank(query='query', documents=('doc1', 'doc2'), model='jina-reranker-v2-base-multilingual', top_n=1)
E         Actual: rerank(query='query', documents=['doc1', 'doc2'], model='jina-reranker-v2-base-multilingual', top_n=1)
E       
E       pytest introspection follows:
E       
E       Kwargs:
E       assert {'documents':...', 'top_n': 1} == {'documents':...', 'top_n': 1}
E         
E         Omitting 3 identical items, use -vv to show
E         Differing items:
E         {'documents': ['doc1', 'doc2']} != {'documents': ('doc1', 'doc2')}
E         
E         Full diff:
E           {...
E         
E         ...Full output truncated (14 lines hidden), use '-vv' to show

tests/unit/test_commands.py:56: AssertionError
=========================== short test summary info ============================
FAILED tests/unit/test_client.py::test_client_post_request - AssertionError: ...
FAILED tests/unit/test_client.py::test_client_post_request_with_extra_headers
FAILED tests/unit/test_commands.py::test_cli_rerank_command - AssertionError:...
========================= 3 failed, 26 passed in 0.45s =========================
